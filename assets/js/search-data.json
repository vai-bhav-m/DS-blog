{
  
    
        "post0": {
            "title": "Matplotlib Basic Plots",
            "content": "An Exception was encountered at &#39;In [1]&#39;. . Execution using papermill encountered an exception here and stopped: . import numpy as np import pandas as pd df = pd.read_excel(&#39;https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DV0101EN/labs/Data_Files/Canada.xlsx&#39;, sheet_name=&#39;Canada by Citizenship&#39;, skiprows=range(20), skipfooter=2) df.head() . XLRDError Traceback (most recent call last) &lt;ipython-input-1-e9358e4b3a91&gt; in &lt;module&gt; 4 sheet_name=&#39;Canada by Citizenship&#39;, 5 skiprows=range(20), -&gt; 6 skipfooter=2) 7 df.head() /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/pandas/util/_decorators.py in wrapper(*args, **kwargs) 294 ) 295 warnings.warn(msg, FutureWarning, stacklevel=stacklevel) --&gt; 296 return func(*args, **kwargs) 297 298 return wrapper /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/pandas/io/excel/_base.py in read_excel(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, parse_dates, date_parser, thousands, comment, skipfooter, convert_float, mangle_dupe_cols) 302 303 if not isinstance(io, ExcelFile): --&gt; 304 io = ExcelFile(io, engine=engine) 305 elif engine and engine != io.engine: 306 raise ValueError( /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/pandas/io/excel/_base.py in __init__(self, path_or_buffer, engine) 865 self._io = stringify_path(path_or_buffer) 866 --&gt; 867 self._reader = self._engines[engine](self._io) 868 869 def __fspath__(self): /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py in __init__(self, filepath_or_buffer) 20 err_msg = &#34;Install xlrd &gt;= 1.0.0 for Excel support&#34; 21 import_optional_dependency(&#34;xlrd&#34;, extra=err_msg) &gt; 22 super().__init__(filepath_or_buffer) 23 24 @property /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/pandas/io/excel/_base.py in __init__(self, filepath_or_buffer) 349 # N.B. xlrd.Book has a read attribute too 350 filepath_or_buffer.seek(0) --&gt; 351 self.book = self.load_workbook(filepath_or_buffer) 352 elif isinstance(filepath_or_buffer, str): 353 self.book = self.load_workbook(filepath_or_buffer) /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/pandas/io/excel/_xlrd.py in load_workbook(self, filepath_or_buffer) 33 if hasattr(filepath_or_buffer, &#34;read&#34;): 34 data = filepath_or_buffer.read() &gt; 35 return open_workbook(file_contents=data) 36 else: 37 return open_workbook(filepath_or_buffer) /opt/hostedtoolcache/Python/3.6.13/x64/lib/python3.6/site-packages/xlrd/__init__.py in open_workbook(filename, logfile, verbosity, use_mmap, file_contents, encoding_override, formatting_info, on_demand, ragged_rows, ignore_workbook_corruption) 168 # files that xlrd can parse don&#39;t start with the expected signature. 169 if file_format and file_format != &#39;xls&#39;: --&gt; 170 raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+&#39;; not supported&#39;) 171 172 bk = open_workbook_xls( XLRDError: Excel xlsx file; not supported . df.columns . df.drop([&#39;AREA&#39;,&#39;REG&#39;,&#39;DEV&#39;,&#39;Type&#39;,&#39;Coverage&#39;], axis=1, inplace=True) df.head() . df.rename( columns={ &#39;OdName&#39;: &#39;Country&#39;, &#39;AreaName&#39;: &#39;Continent&#39;, &#39;RegName&#39;: &#39;Region&#39; }, inplace=True) df.columns . Adding a ‘Total’ column which will show the total immigrants that came into Canada from 1980 to 2013 from each country: . df[&#39;Total&#39;] = df.sum(axis=1) . df.isnull().sum() . df = df.set_index(&#39;Country&#39;) . Let&#39;s do the plotting part now: . %matplotlib inline import matplotlib.pyplot as plt import matplotlib as mpl . Choose a style for the plot. Available styles are as follows: . plt.style.available . # Selecting &#39;ggplot&#39; style mpl.style.use([&#39;ggplot&#39;]) . Line Plot . years = list(map(int, range(1980, 2014))) . # Picking Switzerland as an example df.loc[&#39;Switzerland&#39;, years] . df.loc[&#39;Switzerland&#39;, years].plot() plt.title(&#39;Immigration from Switzerland&#39;) plt.ylabel(&#39;Number of immigrants&#39;) plt.xlabel(&#39;Years&#39;) plt.show() . Comparing 3 different countries . ind_pak_ban = df.loc[[&#39;India&#39;, &#39;Pakistan&#39;, &#39;Bangladesh&#39;], years] ind_pak_ban.head() . ind_pak_ban.T . ind_pak_ban.T.plot(); . Pie Plot . To demonstrate the pie plot we will plot the total number of immigrants for each continent. . cont = df.groupby(&#39;Continent&#39;, axis=0).sum() cont . cont[&#39;Total&#39;].plot(kind=&#39;pie&#39;, figsize=(7,7), autopct=&#39;%1.1f%%&#39;, shadow=True) plt.title(&#39;Immigration By Continenets&#39;) plt.axis(&#39;equal&#39;) plt.show() . This pie chart is understandable. But we can improve it with a little effort. This time I want to choose my own colors and a start angle. . colors = [&#39;lightgreen&#39;, &#39;lightblue&#39;, &#39;pink&#39;, &#39;purple&#39;, &#39;grey&#39;, &#39;gold&#39;] explode = [0.1, 0, 0, 0, 0.1, 0.1] cont[&#39;Total&#39;].plot(kind=&#39;pie&#39;, figsize=(17,10), autopct = &#39;%1.1f%%&#39;, startangle=90, shadow=True, labels=None, pctdistance=1.12, colors=colors, explode=explode) plt.axis(&#39;equal&#39;) plt.legend(labels=cont.index, loc=&#39;upper right&#39;, fontsize=14) plt.show() . Box plot . We will make a box plot of the immigrant’s number of China first. . china = df.loc[[&quot;China&quot;], years].T . china.plot(kind=&#39;box&#39;, figsize=(8, 6)) plt.title(&#39;Box plot of Chinese Immigratns&#39;) plt.ylabel(&#39;Number of Immigrnts&#39;) plt.show() . ind_pak_ban.T.plot(kind=&#39;box&#39;, figsize=(8, 7)) plt.title(&#39;Box plots of Inian, Pakistan and Bangladesh Immigrants&#39;) plt.ylabel(&#39;Number of Immigrants&#39;) . Scatter Plot . For this exercise, I will make a new DataFrame that will contain the years as an index and the total number of immigrants each year. . totalPerYear = pd.DataFrame(df[years].sum(axis=0)) totalPerYear.head() . We need to convert the years to integers. I want to polish the DataFrame a bit just to make it presentable. . totalPerYear.index = map(int, totalPerYear.index) totalPerYear.reset_index(inplace=True) totalPerYear.rename(columns={ &#39;index&#39;: &#39;year&#39;, 0: &#39;total&#39; }, inplace=True) totalPerYear.head() . totalPerYear.plot(kind=&#39;scatter&#39;, x = &#39;year&#39;, y=&#39;total&#39;, figsize=(10, 6), color=&#39;darkred&#39;) plt.title(&#39;Total Immigration from 1980 - 2013&#39;) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Number of Immigrants&#39;) plt.show() . Area Plot . The area plot shows the area covered under a line plot. For this plot, I want to make a DataFrame including the information of India, China, Pakistan, and France. . top = df.loc[[&#39;India&#39;, &#39;China&#39;, &#39;Pakistan&#39;, &#39;France&#39;], years] top = top.T top.head() . colors = [&#39;black&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;red&#39;] top.plot(kind=&#39;area&#39;, stacked=False, figsize=(20, 10), color=colors) plt.title(&#39;Immigration trend from Europe&#39;) plt.ylabel(&#39;Number of Immigrants&#39;) plt.xlabel(&#39;Years&#39;) plt.show() . Remember to use this ‘stacked’ parameter above, if you want to see the individual countries area plot. When it is unstacked, it does not show the individual variable’s area. It stacks on to the previous one. . colors = [&#39;black&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;red&#39;] top.plot(kind=&#39;area&#39;, stacked=True, figsize=(20, 10), color=colors) plt.title(&#39;Immigration trend from Europe&#39;) plt.ylabel(&#39;Number of Immigrants&#39;) plt.xlabel(&#39;Years&#39;) plt.show() . Histogram . The histogram shows the distribution of a variable. Here is an example: . df[2005].plot(kind=&#39;hist&#39;, figsize=(8,5)) plt.title(&#39;Histogram of Immigration from 195 Countries in 2010&#39;) # add a title to the histogram plt.ylabel(&#39;Number of Countries&#39;) # add y-label plt.xlabel(&#39;Number of Immigrants&#39;) # add x-label plt.show() . Let’s use the ‘top’ DataFrame from the scatter plot example and plot each country’s distribution of the number of immigrants in the same plot. . top.plot.hist() plt.title(&#39;Histogram of Immigration from Some Populous Countries&#39;) plt.ylabel(&#39;Number of Years&#39;) plt.xlabel(&#39;Number of Immigrants&#39;) plt.show() . In this plot, we do not see the bin edges clearly. Let’s improve this plot. . Specify the number of bins and find out the bin edges . I will use 15 bins. I am introducing a new parameter here called ‘alpha’. The alpha value determines the transparency of the colors. For these types of overlapping plots, transparency is important to see the shape of each distribution. . count, bin_edges = np.histogram(top, 15) top.plot(kind = &#39;hist&#39;, figsize=(14, 6), bins=15, alpha=0.6, xticks=bin_edges, color=colors); . Like the area plot, you can make a stacked plot of the histogram as well. . top.plot(kind=&#39;hist&#39;, figsize=(12, 6), bins=15, xticks=bin_edges, color=colors, stacked=True, ) plt.title(&#39;Histogram of Immigration from Some Populous Countries&#39;) plt.ylabel(&#39;Number of Years&#39;) plt.xlabel(&#39;Number of Immigrants&#39;) plt.show() . Bar Plot . For the bar plot, I will use the number of immigrants from France per year. . france = df.loc[&#39;France&#39;, years] france.plot(kind=&#39;bar&#39;, figsize = (10, 6)) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Number of immigrants&#39;) plt.title(&#39;Immigrants From France&#39;) plt.show() . You can add extra information to the bar plot. This plot shows an increasing trend since 1997 for over a decade. It could be worth mentioning. It can be done using an annotate function. . france.plot(kind=&#39;bar&#39;, figsize = (10, 6)) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Number of immigrants&#39;) plt.title(&#39;Immigrants From France&#39;) plt.annotate(&#39;Increasing Trend&#39;, xy = (19, 4500), rotation= 23, va = &#39;bottom&#39;, ha = &#39;left&#39;) plt.annotate(&#39;&#39;, xy=(29, 5500), xytext=(17, 3800), xycoords=&#39;data&#39;, arrowprops=dict(arrowstyle=&#39;-&gt;&#39;, connectionstyle=&#39;arc3&#39;, color=&#39;black&#39;, lw=1.5)) plt.show() . Sometimes, showing the bars horizontally makes it more understandable. Showing a label on the bars can be even better. Let’s do it. . france.plot(kind=&#39;barh&#39;, figsize=(12, 16), color=&#39;steelblue&#39;) plt.xlabel(&#39;Year&#39;) # add to x-label to the plot plt.ylabel(&#39;Number of immigrants&#39;) # add y-label to the plot plt.title(&#39;Immigrants From France&#39;) # add title to the plot for index, value in enumerate(france): label = format(int(value), &#39;,&#39;) plt.annotate(label, xy=(value-300, index-0.15), color=&#39;white&#39;) plt.show() . Advanced Matplotlib and Seaborn Plots . import pandas as pd import matplotlib.pyplot as plt import seaborn as sns d = pd.read_csv(&quot;data/USA_cars_datasets.csv&quot;) d.head() . Diverging bars with texts . This plot will show the diverging bars and the value of each bar. We will plot the mean price for each brand. First, find the mean price for each brand using the pandas groupby function: . import numpy as np d1 = d.groupby(&#39;brand&#39;)[&#39;price&#39;].agg([np.mean]) d1.columns = [&#39;mean_price&#39;] d1.head() . The data frame d1 contains the mean price for each brand. It requires the normalized values for a diverging plot. We will normalize the mean price and put it in a new column named ‘price_z’ in the d1 data frame: . x = d1.loc[:, [&#39;mean_price&#39;]] d1[&#39;price_z&#39;] = (x - x.mean()) / x.std() d1.head() . d1.sort_values(&#39;price_z&#39;, axis=0, ascending=True, inplace=True) . To plot the text plot we need x and y values as usual. But also an extra parameter that is the text that is to be plotted. . plt.figure(figsize=(14, 18), dpi=80) for x, y, tex in zip(d1.price_z, d1.index, d1.price_z): t = plt.text(x, y, round(tex, 2), horizontalalignment=&#39;right&#39; if x &lt; 0 else &#39;left&#39;, verticalalignment=&#39;center&#39;, fontdict={&#39;color&#39;: &#39;red&#39; if x &lt; 0 else &#39;darkblue&#39;, &#39;size&#39;: 14}) plt.hlines(y, xmin=0, xmax=tex, color=&#39;red&#39; if tex &lt; 0 else &#39;darkblue&#39;) plt.yticks(d1.index, fontsize=12) plt.title(&quot;Diverging text bars of car price by brand&quot;, fontdict={&quot;size&quot;: 20}) plt.grid(linestyle = &#39;--&#39;, alpha=0.5) plt.show() . Improved Bar Plot . d2 = d1.copy() plt.figure(figsize=(20, 10)) plt.bar(d2.index, d2[&#39;mean_price&#39;], width=0.3) for i, val in enumerate(d2[&#39;mean_price&#39;].values): plt.text(i, val, round(float(val)), horizontalalignment=&#39;center&#39;, verticalalignment=&#39;bottom&#39;, fontdict={&#39;fontweight&#39;:500, &#39;size&#39;: 10}) plt.gca().set_xticklabels(d2.index, fontdict={&#39;size&#39;: 12}, rotation=60) plt.title(&quot;Mean Price for Each Brand&quot;, fontsize=22) plt.ylabel(&quot;Brand&quot;, fontsize=16) plt.show() . Another Method: . fig, ax = plt.subplots(figsize=(28, 10)) ax.vlines(x=d1.index, ymin=0, ymax=d1.mean_price, color= &#39;coral&#39;, alpha=0.7, linewidth=2) ax.scatter(x=d1.index, y=d1.mean_price, s = 75, color=&#39;firebrick&#39;, alpha = 0.7 ) ax.set_title(&quot;Barchat for Average Car Price by Brand&quot;) ax.set_ylabel(&quot;Mean Car Price by Brand&quot;, fontsize=16) ax.set_xticks(d1.index) ax.set_xticklabels(d1.index.str.upper(), rotation=60, fontdict={&#39;horizontalalignment&#39;: &#39;right&#39;, &#39;size&#39;:14}) for row in d1.itertuples(): ax.text(row.Index, row.mean_price+700, s=round(row.mean_price), horizontalalignment = &#39;center&#39;, verticalalignment=&#39;bottom&#39;, fontsize=14) plt.show() . Dealing with a big dataset . d = pd.read_csv(&#39;data/nhanes_2015_2016.csv&#39;) . d.columns . The column ‘DMDEDUC2’ shows the education level of the population and ‘RIDRETH1’ shows the ethnic origin of the population. Both are categorical variables. The next plot will plot the number of each ethnic origin for each education level. . sns.catplot(&quot;RIDRETH1&quot;, col= &quot;DMDEDUC2&quot;, col_wrap = 4, data=d[d.DMDEDUC2.notnull()], kind=&quot;count&quot;, height=3.5, aspect=.8, palette=&#39;tab20&#39;) plt.show() . What if both the variable is not categorical? . In that case, a segregated violin plot will be more appropriate. We will show how to use violin plots for different numbers of variables. First, let’s plot the distribution of age for each education level. . plt.figure(figsize=(12, 4)) a = sns.violinplot(d.DMDEDUC2, d.RIDAGEYR) . It shows the distribution of age for each education level. For example, in education level 1, we find more people above 60. In education level 5, you will find more people around 30. . It will be even more efficient to see the distribution of age of males and females separately. . d[&#39;RIAGENDRx&#39;] = d.RIAGENDR.replace({1: &quot;Male&quot;, 2: &quot;Female&quot;}) plt.figure(figsize=(12, 4)) a = sns.violinplot(d.DMDEDUC2, d.RIDAGEYR, hue=d.RIAGENDRx, split=True) . You have the distribution of age for males and females of each education level. . Let’s add one more variable to it. What if I want the same information as the previous plot for each ethnic group. . sns.catplot(x=&#39;RIDAGEYR&#39;, y=&quot;DMDEDUC2&quot;, hue=&#39;RIAGENDR&#39;, col=&quot;RIDRETH1&quot;,split=True, data = d[d.DMDEDUC2.notnull()], col_wrap=3, orient=&quot;h&quot;, height=5, aspect=1, palette=&#39;tab10&#39;, kind=&#39;violin&#39;, didge=True, cut=0, bw=.2); .",
            "url": "https://vai-bhav-m.github.io/DS-blog/2020/12/29/Data-Visualisation-Cheatsheet.html",
            "relUrl": "/2020/12/29/Data-Visualisation-Cheatsheet.html",
            "date": " • Dec 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "COVID-19 India Daily Dashboard",
            "content": "India . Last update: 15-Mar-21 . Confirmed cases: . 11408653 (+24214) . Confirmed deaths: . 158894 (+128) . Recovered cases: . 11025239 (+19961) . Plot for India: . Plots for the states with highest number of cases: .",
            "url": "https://vai-bhav-m.github.io/DS-blog/2020/08/09/DailyUpdate.html",
            "relUrl": "/2020/08/09/DailyUpdate.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "COVID-19 India Overview - 28 Jul 2020",
            "content": "India . Last update: 28-Jul-20 . Confirmed cases: . 1514800.0 (+49001.0) . Confirmed deaths: . 34121.0 (+770.0) . Cases Deaths PCases PDeaths Cases (+) Deaths (+) Fatality Rate . states . Maharashtra 391440 | 14164 | 383723 | 13882 | 7717 | 282 | 3.62 | . Tamil Nadu 227688 | 3659 | 220716 | 3571 | 6972 | 88 | 1.61 | . Delhi 132275 | 3881 | 131219 | 3853 | 1056 | 28 | 2.93 | . Andhra Pradesh 110297 | 1148 | 102349 | 1090 | 7948 | 58 | 1.04 | . Karnataka 107001 | 2064 | 101465 | 1962 | 5536 | 102 | 1.93 | . Uttar Pradesh 73951 | 1497 | 70493 | 1456 | 3458 | 41 | 2.02 | . West Bengal 62964 | 1449 | 60830 | 1411 | 2134 | 38 | 2.30 | . Gujarat 57982 | 2372 | 56874 | 2348 | 1108 | 24 | 4.09 | . Telangana 57142 | 480 | 55532 | 471 | 1610 | 9 | 0.84 | . Bihar 43591 | 269 | 41111 | 255 | 2480 | 14 | 0.62 | . Rajasthan 38636 | 644 | 37564 | 633 | 1072 | 11 | 1.67 | . Assam 34846 | 92 | 33475 | 90 | 1371 | 2 | 0.26 | . Haryana 32876 | 406 | 32127 | 397 | 749 | 9 | 1.23 | . Madhya Pradesh 29217 | 831 | 28589 | 821 | 628 | 10 | 2.84 | . Orissa 28107 | 189 | 26892 | 181 | 1215 | 8 | 0.67 | . Kerala 20895 | 68 | 19728 | 64 | 1167 | 4 | 0.33 | . Jammu and Kashmir 18879 | 333 | 18390 | 321 | 489 | 12 | 1.76 | . Punjab 14378 | 336 | 13769 | 318 | 609 | 18 | 2.34 | . Jharkhand 9563 | 94 | 8803 | 90 | 760 | 4 | 0.98 | . Goa 5287 | 36 | 5119 | 36 | 168 | 0 | 0.68 | . Tripura 4287 | 21 | 4066 | 17 | 221 | 4 | 0.49 | . Pondicherry 3013 | 47 | 2874 | 43 | 139 | 4 | 1.56 | . Himachal Pradesh 2330 | 13 | 2270 | 13 | 60 | 0 | 0.56 | . Manipur 2317 | 0 | 2286 | 0 | 31 | 0 | 0.00 | . Nagaland 1460 | 4 | 1385 | 5 | 75 | 0 | 0.27 | . Arunachal Pradesh 1330 | 3 | 1239 | 3 | 91 | 0 | 0.23 | . Chandigarh 934 | 14 | 910 | 14 | 24 | 0 | 1.50 | . Meghalaya 779 | 5 | 738 | 5 | 41 | 0 | 0.64 | . Sikkim 592 | 1 | 568 | 1 | 24 | 0 | 0.17 | . Mizoram 384 | 0 | 361 | 0 | 23 | 0 | 0.00 | . Andaman and Nicobar Islands 359 | 1 | 334 | 1 | 25 | 0 | 0.28 | . Daman and Diu 0 | 0 | 0 | 0 | 0 | 0 | NaN | . Lakshadweep 0 | 0 | 0 | 0 | 0 | 0 | NaN | .",
            "url": "https://vai-bhav-m.github.io/DS-blog/2020/08/07/BYOB-Dashboard.html",
            "relUrl": "/2020/08/07/BYOB-Dashboard.html",
            "date": " • Aug 7, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vai-bhav-m.github.io/DS-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vai-bhav-m.github.io/DS-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vai-bhav-m.github.io/DS-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vai-bhav-m.github.io/DS-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}